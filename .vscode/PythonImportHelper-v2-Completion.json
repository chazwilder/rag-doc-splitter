[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "RawBSONDocument",
        "importPath": "bson.raw_bson",
        "description": "bson.raw_bson",
        "isExtraImport": true,
        "detail": "bson.raw_bson",
        "documentation": {}
    },
    {
        "label": "RawBSONDocument",
        "importPath": "bson.raw_bson",
        "description": "bson.raw_bson",
        "isExtraImport": true,
        "detail": "bson.raw_bson",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loggy",
        "description": "loggy",
        "isExtraImport": true,
        "detail": "loggy",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loggy",
        "description": "loggy",
        "isExtraImport": true,
        "detail": "loggy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "MongoConnection",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "csharp_splitter",
        "importPath": "splitters",
        "description": "splitters",
        "isExtraImport": true,
        "detail": "splitters",
        "documentation": {}
    },
    {
        "label": "semantic_splitter",
        "importPath": "splitters",
        "description": "splitters",
        "isExtraImport": true,
        "detail": "splitters",
        "documentation": {}
    },
    {
        "label": "sql_splitter",
        "importPath": "splitters",
        "description": "splitters",
        "isExtraImport": true,
        "detail": "splitters",
        "documentation": {}
    },
    {
        "label": "splitter_idx",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "sqlparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlparse",
        "description": "sqlparse",
        "detail": "sqlparse",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "langchain_core.documents",
        "description": "langchain_core.documents",
        "isExtraImport": true,
        "detail": "langchain_core.documents",
        "documentation": {}
    },
    {
        "label": "Language",
        "importPath": "langchain_text_splitters",
        "description": "langchain_text_splitters",
        "isExtraImport": true,
        "detail": "langchain_text_splitters",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain_text_splitters",
        "description": "langchain_text_splitters",
        "isExtraImport": true,
        "detail": "langchain_text_splitters",
        "documentation": {}
    },
    {
        "label": "TextSplitter",
        "importPath": "semantic_text_splitter",
        "description": "semantic_text_splitter",
        "isExtraImport": true,
        "detail": "semantic_text_splitter",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"rag-doc-splitter-py3.11\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"rag-doc-splitter-py3.11\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"rag-doc-splitter-py3.11\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"rag-doc-splitter-py3.11\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"rag-doc-splitter-py3.11\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "MongoConnection",
        "kind": 6,
        "importPath": "src.db",
        "description": "src.db",
        "peekOfCode": "class MongoConnection:\n    documents: List\n    def __init__(\n        self,\n        database: str = MONGO_DATABASE,\n        collection: str = MONGO_COLLECTION,\n        corpus: str = MONGO_CORPUS,\n    ):\n        \"\"\"\n        Initializes a new instance of the MongoConnection class.",
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.loggy",
        "description": "src.loggy",
        "peekOfCode": "logger = logging.getLogger('rag_logger')\nlogger.setLevel(logging.DEBUG)\nhandler = RotatingFileHandler('rag_logger.log', maxBytes=10*1024*1024, backupCount=1)\nhandler.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)",
        "detail": "src.loggy",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 5,
        "importPath": "src.loggy",
        "description": "src.loggy",
        "peekOfCode": "handler = RotatingFileHandler('rag_logger.log', maxBytes=10*1024*1024, backupCount=1)\nhandler.setLevel(logging.DEBUG)\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)",
        "detail": "src.loggy",
        "documentation": {}
    },
    {
        "label": "formatter",
        "kind": 5,
        "importPath": "src.loggy",
        "description": "src.loggy",
        "peekOfCode": "formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)",
        "detail": "src.loggy",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main():\n    cli = MongoConnection()\n    docs = cli.get_documents()\n    for doc in docs[:2]:\n        splitter_chunks = SPLITTER_MAP[FUNCTION_MAP[doc[\"manual\"]]](doc[\"content\"])\n        formatted_chunks = splitter_idx(doc, splitter_chunks)\n        cli.save_documents(doc, formatted_chunks)\nmain()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "FUNCTION_MAP",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "FUNCTION_MAP = json.loads(os.getenv(\"FUNCTION_MAP\", \"{}\"))\nSPLITTER_MAP = {\n    \"csharp_splitter\": csharp_splitter,\n    \"sql_splitter\": sql_splitter,\n    \"semantic_splitter\": semantic_splitter,\n}\ndef main():\n    cli = MongoConnection()\n    docs = cli.get_documents()\n    for doc in docs[:2]:",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "SPLITTER_MAP",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "SPLITTER_MAP = {\n    \"csharp_splitter\": csharp_splitter,\n    \"sql_splitter\": sql_splitter,\n    \"semantic_splitter\": semantic_splitter,\n}\ndef main():\n    cli = MongoConnection()\n    docs = cli.get_documents()\n    for doc in docs[:2]:\n        splitter_chunks = SPLITTER_MAP[FUNCTION_MAP[doc[\"manual\"]]](doc[\"content\"])",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "csharp_splitter",
        "kind": 2,
        "importPath": "src.splitters",
        "description": "src.splitters",
        "peekOfCode": "def csharp_splitter(document: str) -> List[Document]:\n    \"\"\"\n    Splits a C# document into smaller chunks using a recursive character-based text splitter.\n    Args:\n        document (str): The C# document to be split.\n    Returns:\n        List[Document]: A list of Document objects, each representing a chunk of the original document.\n    \"\"\"\n    c_splitter = RecursiveCharacterTextSplitter.from_language(\n        language=Language.CSHARP, chunk_size=1024, chunk_overlap=0",
        "detail": "src.splitters",
        "documentation": {}
    },
    {
        "label": "semantic_splitter",
        "kind": 2,
        "importPath": "src.splitters",
        "description": "src.splitters",
        "peekOfCode": "def semantic_splitter(document: str) -> List[str]:\n    \"\"\"\n    Splits a document into smaller chunks using a semantic text splitter based on a specific model.\n    Args:\n        document (str): The document to be split.\n    Returns:\n        List[str]: A list of strings, each representing a chunk of the original document.\n    \"\"\"\n    splitter = TextSplitter.from_tiktoken_model(\"gpt-3.5-turbo\", 512)\n    return splitter.chunks(document)",
        "detail": "src.splitters",
        "documentation": {}
    },
    {
        "label": "sql_splitter",
        "kind": 2,
        "importPath": "src.splitters",
        "description": "src.splitters",
        "peekOfCode": "def sql_splitter(document: str) -> List[str]:\n    \"\"\"\n    Splits an SQL document into individual SQL statements.\n    This function uses the `sqlparse` library to split a given SQL document into\n    a list of individual SQL statements. This can be useful for processing or\n    analyzing each statement separately.\n    Args:\n        document (str): The SQL document to be split.\n    Returns:\n        List[str]: A list of strings, each representing an individual SQL statement",
        "detail": "src.splitters",
        "documentation": {}
    },
    {
        "label": "splitter_idx",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def splitter_idx(\n    document: RawBSONDocument, chunks: List[str | Document]\n) -> List[Dict[str, str]]:\n    idx = 0\n    base_id = str(document[\"_id\"])\n    file_name = document[\"file_name\"]\n    child_documents = []\n    for chunk in chunks:\n        logger.debug(f\"file: {file_name}, index: {idx}, chunk: {chunk}\")\n        if isinstance(chunk, Document):",
        "detail": "src.utils",
        "documentation": {}
    }
]